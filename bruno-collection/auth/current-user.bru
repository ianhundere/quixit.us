meta {
  name: Get Current User
  type: http
  description: retrieves the currently authenticated user's information
}

get {
  url: {{base_url}}/api/auth/current-user
}

headers {
  Authorization: Bearer {{auth_token}}
}

tests {
  // verify response status when authenticated
  test("should return 200 when authenticated", function() {
    if (req.headers.Authorization) {
      expect(res.status).to.equal(200)
    }
  })

  // verify response structure when authenticated
  test("should return user object with required fields", function() {
    if (res.status === 200) {
      expect(res.body).to.have.property('ID')
      expect(res.body).to.have.property('email')
    }
  })

  // verify data types when authenticated
  test("should return correct data types", function() {
    if (res.status === 200) {
      expect(res.body.ID).to.be.a('number')
      expect(res.body.email).to.be.a('string')
      // In dev mode, should match our test user
      expect(res.body.ID).to.equal(1)
      expect(res.body.email).to.equal('test@user.com')
    }
  })

  // verify unauthorized access
  test("should return 401 without auth token", function() {
    // Skip this test for now as we can't make separate requests in Bruno tests
    expect(true).to.equal(true)
  })
}

docs {
  endpoint returns:
  {
    "ID": number,
    "email": string
  }
} 